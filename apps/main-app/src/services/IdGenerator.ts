/**
 * Simple but secure ID generator for demo/localStorage mode
 * Will be replaced by backend-generated IDs in production
 */
export class IdGenerator {
  private static counter: number = 0;
  private static sessionId: string = '';

  /**
   * Initialize the ID generator with a session-specific prefix
   */
  static initialize(): void {
    // Create a session-specific identifier
    this.sessionId = this.generateSessionId();
    
    // Load the last counter value from localStorage to avoid collisions
    const lastCounter = localStorage.getItem('id_counter');
    this.counter = lastCounter ? parseInt(lastCounter, 10) : 0;
  }

  /**
   * Generate a unique ID for demo mode
   * Format: [prefix]_[timestamp]_[counter]_[random]
   * Example: "car_1703123456789_001_a7b2"
   */
  static generateId(prefix: string = 'entity'): string {
    // Increment counter and save to localStorage
    this.counter++;
    localStorage.setItem('id_counter', this.counter.toString());

    // Generate components
    const timestamp = Date.now();
    const counter = this.counter.toString().padStart(3, '0');
    const random = this.generateRandomSuffix(4);

    return `${prefix}_${timestamp}_${counter}_${random}`;
  }

  /**
   * Generate entity-specific IDs
   */
  static generateCarId(): string {
    return this.generateId('car');
  }

  static generateAlertId(): string {
    return this.generateId('alert');
  }

  static generateServiceRecordId(): string {
    return this.generateId('service');
  }

  static generateMaintenanceEntryId(): string {
    return this.generateId('maint');
  }

  static generateMaintenancePlanId(): string {
    return this.generateId('plan');
  }

  static generateServiceOperationId(): string {
    return this.generateId('op');
  }

  /**
   * Generate a short random string
   */
  private static generateRandomSuffix(length: number): string {
    const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  /**
   * Generate session ID for this browser session
   */
  private static generateSessionId(): string {
    let sessionId = sessionStorage.getItem('demo_session_id');
    if (!sessionId) {
      sessionId = this.generateRandomSuffix(8);
      sessionStorage.setItem('demo_session_id', sessionId);
    }
    return sessionId;
  }

  /**
   * Validate if an ID was generated by this system
   */
  static isValidDemoId(id: string): boolean {
    const pattern = /^[a-z]+_\d+_\d{3}_[a-z0-9]{4}$/;
    return pattern.test(id);
  }

  /**
   * Extract information from a demo ID
   */
  static parseId(id: string): {
    prefix: string;
    timestamp: number;
    counter: number;
    random: string;
  } | null {
    if (!this.isValidDemoId(id)) return null;

    const parts = id.split('_');
    return {
      prefix: parts[0],
      timestamp: parseInt(parts[1], 10),
      counter: parseInt(parts[2], 10),
      random: parts[3]
    };
  }

  /**
   * Reset counter (useful for testing or data cleanup)
   */
  static resetCounter(): void {
    this.counter = 0;
    localStorage.removeItem('id_counter');
  }

  /**
   * Get current counter value (for debugging)
   */
  static getCurrentCounter(): number {
    return this.counter;
  }
}