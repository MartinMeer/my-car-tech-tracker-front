services:
  # Marketing site (FleetMaster Pro)
  marketing-site:
    build:
      context: ../apps/marketing-site
      dockerfile: Dockerfile
    container_name: fleetmaster-marketing
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fleetmaster-network

  # Main application (Car Tracker)
  main-app:
    build:
      context: ../apps/main-app
      dockerfile: Dockerfile
    container_name: fleetmaster-main
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fleetmaster-network

  # Gateway/Load balancer
  gateway:
    image: nginx:alpine
    container_name: fleetmaster-gateway
    ports:
      - "80:80"
      - "443:443"  # For SSL if needed
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro  # For SSL certificates
    depends_on:
      marketing-site:
        condition: service_healthy
      main-app:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fleetmaster-network

  # Backend (Java Spring Boot) - Disabled until implementation
  # backend:
  #   build:
  #     context: ../backend-demo
  #     dockerfile: ../infrastructure/Dockerfile.backend
  #   container_name: fleetmaster-backend
  #   restart: unless-stopped
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #     - SERVER_PORT=8080
  #   ports:
  #     - "8080:8080"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s
  #   networks:
  #     - fleetmaster-network

networks:
  fleetmaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  backend-data:
    driver: local 