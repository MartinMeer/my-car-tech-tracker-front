name: Marketing Site CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/marketing-site/**'
      - 'packages/shared/**'
      - '.github/workflows/marketing-site-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/marketing-site/**'
      - 'packages/shared/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: fleetmaster/marketing-site

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/marketing-site/package-lock.json

      - name: Install dependencies
        working-directory: apps/marketing-site
        run: npm ci

      - name: Run linting
        working-directory: apps/marketing-site
        run: npm run lint || echo "Linting will be added"

      - name: Run tests
        working-directory: apps/marketing-site
        run: npm run test || echo "Tests will be added"

      - name: Build application
        working-directory: apps/marketing-site
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: marketing-site-build
          path: apps/marketing-site/dist/

  build-docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: apps/marketing-site
          file: apps/marketing-site/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying marketing site to staging environment"
          echo "Image: ${{ needs.build-docker.outputs.image-tag }}"
          # Add your staging deployment logic here
          # Example: kubectl set image deployment/marketing-site app=${{ needs.build-docker.outputs.image-tag }}

  deploy-production:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying marketing site to production environment"
          echo "Image: ${{ needs.build-docker.outputs.image-tag }}"
          # Add your production deployment logic here
          # Example: kubectl set image deployment/marketing-site app=${{ needs.build-docker.outputs.image-tag }}

  notify:
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: always()
    steps:
      - name: Notification
        run: |
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build-docker.result }}" == "success" ]]; then
            echo "✅ Marketing site deployment successful"
          else
            echo "❌ Marketing site deployment failed"
          fi 