// apps/main-app/src/components/DevTools.tsx
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Switch } from './ui/switch';
import { ConfigService } from '../services/ConfigService';
import { DataService } from '../services/DataService';
import { IdGenerator } from '../services/IdGenerator';
import { Settings, Database, HardDrive, RefreshCw, Hash } from 'lucide-react';

/**
 * Development tools component for testing and debugging
 * Only visible in development mode
 */
export function DevTools() {
  const [isOpen, setIsOpen] = useState(false);
  const [debugInfo, setDebugInfo] = useState(ConfigService.getDebugInfo());

  // Only show in development
  if (process.env.NODE_ENV === 'production') {
    return null;
  }

  const refreshDebugInfo = () => {
    const configDebugInfo = ConfigService.getDebugInfo();
    const idGeneratorInfo = {
      currentCounter: IdGenerator.getCurrentCounter(),
      lastGenerated: localStorage.getItem('id_counter'),
      sessionId: sessionStorage.getItem('demo_session_id')
    };
    setDebugInfo({
      ...configDebugInfo,
      idGenerator: idGeneratorInfo
    });
  };

  const handleBackendToggle = (useBackend: boolean) => {
    if (useBackend) {
      ConfigService.setBackendOverride(true);
    } else {
      ConfigService.setBackendOverride(false);
    }
    refreshDebugInfo();
    
    // Reload the page to apply changes
    setTimeout(() => {
      window.location.reload();
    }, 500);
  };

  const clearOverride = () => {
    ConfigService.clearBackendOverride();
    refreshDebugInfo();
    
    // Reload the page to apply changes
    setTimeout(() => {
      window.location.reload();
    }, 500);
  };

  const clearAllData = () => {
    if (confirm('Очистить все локальные данные? Это действие нельзя отменить.')) {
      DataService.clearLocalData();
      alert('Локальные данные очищены');
      window.location.reload();
    }
  };

  if (!isOpen) {
    return (
      <div className="fixed bottom-4 right-4 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          size="sm"
          variant="outline"
          className="bg-white shadow-lg border-2 border-orange-200"
        >
          <Settings className="h-4 w-4" />
        </Button>
      </div>
    );
  }

  return (
    <div className="fixed bottom-4 right-4 z-50 w-80">
      <Card className="shadow-lg border-2 border-orange-200">
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-sm flex items-center">
              <Settings className="h-4 w-4 mr-2" />
              Dev Tools
            </CardTitle>
            <Button
              onClick={() => setIsOpen(false)}
              size="sm"
              variant="ghost"
              className="h-6 w-6 p-0"
            >
              ×
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Environment Info */}
          <div>
            <h4 className="text-sm font-medium mb-2">Environment</h4>
            <div className="space-y-1 text-xs">
              <div className="flex justify-between">
                <span>Mode:</span>
                <Badge variant="outline">{debugInfo.environment}</Badge>
              </div>
              <div className="flex justify-between">
                <span>Data Source:</span>
                <Badge variant={debugInfo.useBackend ? 'default' : 'secondary'}>
                  {debugInfo.useBackend ? 'Backend API' : 'localStorage'}
                </Badge>
              </div>
              {debugInfo.hasOverride && (
                <div className="flex justify-between">
                  <span>Override:</span>
                  <Badge variant="outline" className="text-orange-600">
                    Active
                  </Badge>
                </div>
              )}
            </div>
          </div>

          {/* ID Generator Info */}
          {debugInfo.idGenerator && (
            <div>
              <h4 className="text-sm font-medium mb-2 flex items-center">
                <Hash className="h-3 w-3 mr-1" />
                ID Generator
              </h4>
              <div className="space-y-1 text-xs">
                <div className="flex justify-between">
                  <span>Counter:</span>
                  <Badge variant="outline">{debugInfo.idGenerator.currentCounter}</Badge>
                </div>
                <div className="flex justify-between">
                  <span>Last ID:</span>
                  <Badge variant="outline">{debugInfo.idGenerator.lastGenerated || 'None'}</Badge>
                </div>
                {debugInfo.idGenerator.sessionId && (
                  <div className="flex justify-between">
                    <span>Session:</span>
                    <Badge variant="outline" className="text-xs">
                      {debugInfo.idGenerator.sessionId.substring(0, 6)}...
                    </Badge>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Backend Toggle */}
          <div>
            <h4 className="text-sm font-medium mb-2">Data Source Control</h4>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  {debugInfo.useBackend ? (
                    <Database className="h-4 w-4" />
                  ) : (
                    <HardDrive className="h-4 w-4" />
                  )}
                  <span className="text-sm">Use Backend API</span>
                </div>
                <Switch
                  checked={debugInfo.useBackend}
                  onCheckedChange={handleBackendToggle}
                />
              </div>
              
              {debugInfo.hasOverride && (
                <Button
                  onClick={clearOverride}
                  size="sm"
                  variant="outline"
                  className="w-full text-xs"
                >
                  Clear Override
                </Button>
              )}
            </div>
          </div>

          {/* Actions */}
          <div>
            <h4 className="text-sm font-medium mb-2">Actions</h4>
            <div className="space-y-2">
              <Button
                onClick={refreshDebugInfo}
                size="sm"
                variant="outline"
                className="w-full text-xs"
              >
                <RefreshCw className="h-3 w-3 mr-1" />
                Refresh Info
              </Button>
              
              <Button
                onClick={() => ConfigService.logDebugInfo()}
                size="sm"
                variant="outline"
                className="w-full text-xs"
              >
                Log Config
              </Button>
              
              <Button
                onClick={() => {
                  if (confirm('Reset ID counter? This will reset ID generation.')) {
                    IdGenerator.resetCounter();
                    refreshDebugInfo();
                    alert('ID counter reset');
                  }
                }}
                size="sm"
                variant="outline"
                className="w-full text-xs"
              >
                <Hash className="h-3 w-3 mr-1" />
                Reset ID Counter
              </Button>
              
              <Button
                onClick={clearAllData}
                size="sm"
                variant="destructive"
                className="w-full text-xs"
              >
                Clear Local Data
              </Button>
            </div>
          </div>

          {/* URLs */}
          <div>
            <h4 className="text-sm font-medium mb-2">URLs</h4>
            <div className="space-y-1 text-xs text-gray-600">
              <div>API: {debugInfo.apiUrl}</div>
              <div>Marketing: {debugInfo.marketingUrl}</div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}