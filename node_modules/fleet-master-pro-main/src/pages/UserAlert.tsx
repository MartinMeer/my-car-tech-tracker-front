/**
 * User alert creation form for reporting vehicle problems and issues
 */
import { useState, useEffect } from 'react'
import { Link, useNavigate } from 'react-router'
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card'
import { Button } from '../components/ui/button'
import { Input } from '../components/ui/input'
import { Label } from '../components/ui/label'
import { Textarea } from '../components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select'
import { RadioGroup, RadioGroupItem } from '../components/ui/radio-group'
import { DataService, Car as CarType } from '../services/DataService'
import { AlertService, AlertPriority, AlertFormData } from '../services/AlertService'
import { ArrowLeft, AlertTriangle, Save, X } from 'lucide-react'

export default function UserAlert() {
  const navigate = useNavigate()
  const [cars, setCars] = useState<CarType[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [formData, setFormData] = useState({
    carId: '',
    date: new Date().toISOString().split('T')[0],
    mileage: '',
    system: '',
    location: '',
    priority: '' as AlertPriority | '',
    description: ''
  })

  // Load cars on component mount
  useEffect(() => {
    const loadCars = async () => {
      try {
        setIsLoading(true)
        const carsData = await DataService.getCars()
        setCars(carsData)
      } catch (error) {
        console.error('Error loading cars:', error)
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π')
      } finally {
        setIsLoading(false)
      }
    }

    loadCars()
  }, [])

  const systemOptions = [
    '–î–≤–∏–≥–∞—Ç–µ–ª—å',
    '–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è', 
    '–ü–æ–¥–≤–µ—Å–∫–∞',
    '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
    '–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
    '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',
    '–°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
    '–¢–æ–ø–ª–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
    '–í—ã—Ö–ª–æ–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
    '–°–∞–ª–æ–Ω',
    '–ö—É–∑–æ–≤',
    '–î—Ä—É–≥–æ–µ (—É–∫–∞–∑–∞—Ç—å)'
  ]

  const priorityOptions = [
    {
      value: 'critical',
      icon: 'üî¥',
      emoji: 'üôè',
      title: '–°–æ–≤—Å–µ–º –ø–ª–æ—Ö–æ/—Å–æ–≤—Å–µ–º —Å—Ç—Ä–∞—à–Ω–æ',
      description: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞, —Ç—Ä–µ–±—É—é—â–∞—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è'
    },
    {
      value: 'unclear', 
      icon: 'üü°',
      emoji: 'ü§∑‚Äç‚ôÄÔ∏è',
      title: '–ù–µ–ø–æ–Ω—è—Ç–Ω–æ',
      description: '–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ—è—Å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, —Ç—Ä–µ–±—É–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'
    },
    {
      value: 'can-wait',
      icon: 'üîµ', 
      emoji: '‚úçÔ∏è',
      title: '–ü–æ—Ç–µ—Ä–ø–∏–º',
      description: '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –º–æ–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—å'
    }
  ]

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const validateForm = () => {
    const required = ['carId', 'date', 'system', 'priority', 'description']
    return required.every(field => formData[field as keyof typeof formData].trim() !== '')
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
      return
    }

    const selectedCar = cars.find(c => c.id === formData.carId)
    if (!selectedCar) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
      return
    }

    try {
      setIsSubmitting(true)
      setError(null)

      const alertData: AlertFormData = {
        carId: formData.carId,
        carName: selectedCar.name,
        type: 'problem',
        priority: formData.priority as AlertPriority,
        description: formData.description,
        location: formData.system + (formData.location ? ` - ${formData.location}` : ''),
        mileage: parseInt(formData.mileage) || 0
      }

      await AlertService.createAlert(alertData)

      // Navigate to alert list with success message
      navigate('/alerts', { 
        state: { message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!' }
      })
    } catch (error) {
      console.error('Error creating alert:', error)
      setError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setIsSubmitting(false)
    }
  }

  const selectedCar = cars.find(c => c.id === formData.carId)

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b sticky top-0 z-10">
        <div className="px-4 py-3">
          <div className="flex items-center space-x-3">
            <Link to="/">
              <Button variant="ghost" size="sm">
                <ArrowLeft className="h-4 w-4" />
              </Button>
            </Link>
            <div>
              <h1 className="text-lg font-bold text-gray-900 flex items-center">
                <AlertTriangle className="h-5 w-5 mr-2 text-red-600" />
                –°–æ–æ–±—â–∏ –æ –ø—Ä–æ–±–ª–µ–º–µ
              </h1>
              <p className="text-sm text-gray-600">–ó–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–µ–Ω–Ω—É—é –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</p>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="px-4 py-6">
        {/* Error Display */}
        {error && (
          <Card className="mb-6 border-red-200 bg-red-50">
            <CardContent className="p-4">
              <div className="flex items-center space-x-2 text-red-800">
                <AlertTriangle className="h-4 w-4" />
                <p className="text-sm">{error}</p>
              </div>
            </CardContent>
          </Card>
        )}
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Information */}
          <Card>
            <CardContent className="p-4">
              <div className="grid grid-cols-3 gap-4 text-sm">
                <div>
                  <p className="text-gray-600">–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</p>
                  <p className="font-medium">{selectedCar ? selectedCar.name : '-'}</p>
                </div>
                <div>
                  <p className="text-gray-600">–î–∞—Ç–∞:</p>
                  <p className="font-medium">{formData.date || '-'}</p>
                </div>
                <div>
                  <p className="text-gray-600">–ü—Ä–æ–±–µ–≥:</p>
                  <p className="font-medium">{formData.mileage || '-'}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Car Selection */}
          <Card>
            <CardContent className="p-4 space-y-4">
              <div>
                <Label htmlFor="car">–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å *</Label>
                <Select value={formData.carId} onValueChange={(value) => handleInputChange('carId', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å..." />
                  </SelectTrigger>
                  <SelectContent>
                    {cars.map((car) => (
                      <SelectItem key={car.id} value={car.id}>
                        {car.name} - {car.brand} {car.model}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="date">–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è *</Label>
                <Input
                  id="date"
                  type="date"
                  value={formData.date}
                  onChange={(e) => handleInputChange('date', e.target.value)}
                />
              </div>

              <div>
                <Label htmlFor="mileage">–ü—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (–∫–º)</Label>
                <Input
                  id="mileage"
                  type="number"
                  placeholder="85000"
                  value={formData.mileage}
                  onChange={(e) => handleInputChange('mileage', e.target.value)}
                />
              </div>
            </CardContent>
          </Card>

          {/* Problem Location */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–ì–¥–µ –∑–∞–º–µ—á–µ–Ω–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="system">–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É *</Label>
                <Select value={formData.system} onValueChange={(value) => handleInputChange('system', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É..." />
                  </SelectTrigger>
                  <SelectContent>
                    {systemOptions.map((system) => (
                      <SelectItem key={system} value={system}>
                        {system}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="location">–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏</Label>
                <Input
                  id="location"
                  placeholder="–û–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ..."
                  value={formData.location}
                  onChange={(e) => handleInputChange('location', e.target.value)}
                />
              </div>
            </CardContent>
          </Card>

          {/* Priority Selection */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã</CardTitle>
            </CardHeader>
            <CardContent>
              <RadioGroup
                value={formData.priority}
                onValueChange={(value) => handleInputChange('priority', value)}
                className="space-y-3"
              >
                {priorityOptions.map((option) => (
                  <div key={option.value} className="border rounded-lg p-4">
                    <div className="flex items-center space-x-3">
                      <RadioGroupItem value={option.value} id={option.value} />
                      <div className="flex items-center space-x-2">
                        <span className="text-lg">{option.icon}</span>
                        <span className="text-lg">{option.emoji}</span>
                      </div>
                      <div className="flex-1">
                        <label htmlFor={option.value} className="cursor-pointer">
                          <p className="font-medium">{option.title}</p>
                          <p className="text-sm text-gray-600">{option.description}</p>
                        </label>
                      </div>
                    </div>
                  </div>
                ))}
              </RadioGroup>
            </CardContent>
          </Card>

          {/* Problem Description */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</CardTitle>
            </CardHeader>
            <CardContent>
              <div>
                <Label htmlFor="description">–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *</Label>
                <Textarea
                  id="description"
                  placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ..."
                  maxLength={500}
                  value={formData.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                  className="min-h-[100px]"
                />
                <p className="text-xs text-gray-500 mt-1">
                  {formData.description.length}/500 —Å–∏–º–≤–æ–ª–æ–≤
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-3">
            <Link to="/" className="flex-1">
              <Button variant="outline" className="w-full" disabled={isSubmitting}>
                <X className="h-4 w-4 mr-2" />
                –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
              </Button>
            </Link>
            <Button 
              type="submit" 
              className="flex-1" 
              disabled={!validateForm() || isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-2" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </>
              )}
            </Button>
          </div>
        </form>
      </main>
    </div>
  )
}